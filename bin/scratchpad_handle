#!/usr/bin/env luajit

local function skip_delim(str, pos, delim, err_if_missing)
  pos = pos + #str:match("^%s*", pos)
  if str:sub(pos, pos) ~= delim then
    if err_if_missing then
      error("Expected " .. delim .. " near position " .. pos)
    end
    return pos, false
  end
  return pos + 1, true
end

local function parse_str_val(str, pos, val)
  val = val or ""
  local early_end_error = "End of input found while parsing string."
  if pos > #str then
    error(early_end_error)
  end
  local c = str:sub(pos, pos)
  if c == '"' then
    return val, pos + 1
  end
  if c ~= "\\" then
    return parse_str_val(str, pos + 1, val .. c)
  end
  -- We must have a \ character.
  local esc_map = { b = "\b", f = "\f", n = "\n", r = "\r", t = "\t" }
  local nextc = str:sub(pos + 1, pos + 1)
  if not nextc then
    error(early_end_error)
  end
  return parse_str_val(str, pos + 2, val .. (esc_map[nextc] or nextc))
end

local function parse_num_val(str, pos)
  local num_str = str:match("^-?%d+%.?%d*[eE]?[+-]?%d*", pos)
  local val = tonumber(num_str)
  if not val then
    error("Error parsing number at position " .. pos .. ".")
  end
  return val, pos + #num_str
end

local null = {}

local function parse(str, pos, end_delim)
  pos = pos or 1
  if pos > #str then
    error("Reached unexpected end of input.")
  end
  pos = pos + #str:match("^%s*", pos) -- Skip whitespace.
  local first = str:sub(pos, pos)
  if first == "{" then
    local obj, key, delim_found = {}, true, true
    pos = pos + 1
    while true do
      key, pos = parse(str, pos, "}")
      if key == nil then
        return obj, pos
      end
      if not delim_found then
        error("Comma missing between object items.")
      end
      pos = skip_delim(str, pos, ":", true)
      obj[key], pos = parse(str, pos)
      pos, delim_found = skip_delim(str, pos, ",")
    end
  elseif first == "[" then
    local arr, val, delim_found = {}, true, true
    pos = pos + 1
    while true do
      val, pos = parse(str, pos, "]")
      if val == nil then
        return arr, pos
      end
      if not delim_found then
        error("Comma missing between array items.")
      end
      arr[#arr + 1] = val
      pos, delim_found = skip_delim(str, pos, ",")
    end
  elseif first == '"' then
    return parse_str_val(str, pos + 1)
  elseif first == "-" or first:match("%d") then
    return parse_num_val(str, pos)
  elseif first == end_delim then
    return nil, pos + 1
  else
    local literals = { ["true"] = true, ["false"] = false, ["null"] = null }
    for lit_str, lit_val in pairs(literals) do
      local lit_end = pos + #lit_str - 1
      if str:sub(pos, lit_end) == lit_str then
        return lit_val, lit_end + 1
      end
    end
    local pos_info_str = "position " .. pos .. ": " .. str:sub(pos, pos + 10)
    error("Invalid json syntax starting at " .. pos_info_str)
  end
end

local help = [[move a window from/to the scratchpad in i3wm
the -i, -c, -t options are optional but at least one has to be present
  -h help
  -i window instance
  -c window class
  -t window title
  -n add next selector option (-i, -t, -c) only to i3 selector (use when next option is regex)
  -p program to execute if window does not exist (e.g. start the window program)
  -s size of the window in ppt]]
local selectors = {}
local select = {}
local select_is_empty = true
local add_next = true
local size = nil
local program = nil
local i = 1

local function get_next_arg()
  i = i + 1
  return arg[i]
end

local function add_selector(select_name, selector_name)
  local prop = get_next_arg()
  if add_next then
    select[select_name] = prop
    select_is_empty = false
  end
  selectors[selector_name] = prop
  add_next = true
end

while arg[i] ~= nil do
  local opt = arg[i]
  if opt == "-h" then
    print(help)
    os.exit(0)
  elseif opt == "-i" then
    add_selector("instance", "instance")
  elseif opt == "-c" then
    add_selector("class", "class")
  elseif opt == "-t" then
    add_selector("name", "title")
  elseif opt == "-s" then
    size = get_next_arg()
  elseif opt == "-p" then
    program = get_next_arg()
  elseif opt == "-n" then
    add_next = false
  end
  i = i + 1
end

local handle = io.popen("i3-msg -t get_tree")
local tree = parse(handle:read("*a"))
handle:close()

if select_is_empty or size == nil then
  print(help)
  os.exit(0)
end

local selector = ""

for key, value in pairs(selectors) do
  if selector ~= "" then
    selector = selector .. " "
  end
  selector = selector .. key .. '="' .. value .. '"'
end

selector = "[" .. selector .. "]"

local scratch_nodes = {}
local non_scratch_nodes = {}
local function extract(node, is_scratch)
  if node.window_type == "normal" or node.window_type == "unknown" then
    if is_scratch then
      scratch_nodes[#scratch_nodes + 1] = node
    else
      non_scratch_nodes[#non_scratch_nodes + 1] = node
    end
  end
  if node.name == "__i3_scratch" then
    is_scratch = true
  end
  for _, next_node in ipairs(node.nodes) do
    extract(next_node, is_scratch)
  end
  for _, next_node in ipairs(node.floating_nodes) do
    extract(next_node, is_scratch)
  end
end

extract(tree, false)

local function get_node(nodes)
  for _, node in pairs(nodes) do
    local found = true
    for key, value in pairs(select) do
      local prop = node
      if key ~= "name" then
        prop = node.window_properties
      end
      if prop[key] ~= value then
        found = false
      end
    end
    if found then
      return node
    end
  end
end

local link_pattern = "^___linked"

local function hide_linked_nodes()
  for _, node in pairs(non_scratch_nodes) do
    if node.name:find(link_pattern) ~= nil then
      os.execute('i3-msg [title="' .. node.name .. '"] move scratchpad')
    end
  end
end

local function hide_node()
  os.execute("i3-msg '" .. selector .. "' move scratchpad")
end

local function show_node()
  os.execute(
    "i3-msg 'fullscreen disable; "
      .. selector
      .. " scratchpad show; "
      .. selector
      .. " resize set width "
      .. size
      .. " ppt height "
      .. size
      .. " ppt; "
      .. selector
      .. " move position center"
      .. "'"
  )
end

local node = get_node(non_scratch_nodes)
if node ~= nil then
  hide_node()
else
  node = get_node(scratch_nodes)
  if node ~= nil then
    if node.name:find(link_pattern) ~= nil then
      hide_linked_nodes()
    end
    show_node()
  elseif program ~= nil then
    os.execute("i3-msg fullscreen disable")
    if select.name ~= nil and select.name:find(link_pattern) ~= nil then
      hide_linked_nodes()
    end
    os.execute(program)
  end
end
