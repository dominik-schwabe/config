#!/usr/bin/env python3
import json
from typing import Any

import rich
import argparse
import httpx
import sys
from rich.pretty import Pretty
from rich.text import Text


def print_err(arg: Any, end: str = "\n"):
    rich.print(
        arg,
        file=sys.stderr,
        flush=True,
        end=end,
    )


def print_out(arg: str, end: str = "\n"):
    print(
        arg,
        file=sys.stdout,
        flush=True,
        end=end,
    )


parser = argparse.ArgumentParser()
parser.add_argument("--json", default=None)
parser.add_argument("--method", default=None)
parser.add_argument("--route", type=str, default="")
parser.add_argument("--port", type=int, default=5000)
parser.add_argument("--base", type=str, default="http://localhost")
parser.add_argument("--origin", type=str, default="http://localhost:3000")
parser.add_argument("--force-http2", action="store_true")
parser.add_argument("--show-request-meta", action="store_true")
parser.add_argument("--show-response-meta", action="store_true")
parser.add_argument("--fake", action="store_true")
parser.add_argument("--headers", default=None)
parser.add_argument("url", nargs="?", default=None)
args = parser.parse_args()

if args.method is not None:
    method = args.method.upper()
elif args.json is None:
    method = "GET"
else:
    method = "POST"

headers = {}

url = args.url
if url is None:
    url = f"{args.base}"
    if args.port >= 0:
        url = f"{url}:{args.port}"
    url = f"{url}{args.route}"
    headers["origin"] = args.origin

if "://" not in url:
    url = f"http://{url}"


if args.fake:
    import fake_useragent

    headers["User-Agent"] = fake_useragent.UserAgent().chrome
if user_headers := args.headers:
    headers.update(json.loads(user_headers))


kwargs = {
    "method": method,
    "url": url,
    "headers": headers,
}

if args.json is not None:
    kwargs["json"] = json.loads(args.json)


if args.show_request_meta:
    print_err(Pretty(kwargs), end="\n\n")


def to_number(x: Any):
    number = float(x)
    return int(number) if number.is_integer() else number


try:
    with httpx.Client(
        http1=not args.force_http2, http2=True, follow_redirects=True, timeout=None
    ) as client:
        with client.stream(**kwargs) as r:
            network_stream = r.extensions["network_stream"]
            server_addr = network_stream.get_extra_info("server_addr")
            for line in r.iter_text():
                print_out(line, end="")
            if (
                args.show_response_meta
                or method == "HEAD"
                or not 200 <= r.status_code < 300
            ):
                redirects = [str(e.url) for e in [*r.history, r]]
                print()
                print_err(
                    Pretty(
                        {
                            "headers": dict(r.headers),
                            "history": redirects,
                            "code": r.status_code,
                            "method": method,
                            "address": server_addr,
                            "http_version": to_number(r.http_version.split("/")[-1]),
                        }
                    )
                )
except httpx.ConnectError:
    print_err(Text.from_markup(f"{kwargs['url']} unreachable", style="red"))
