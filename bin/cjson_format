#!/usr/bin/env python

import json
import sys
from typing import Any


class CJSONError(Exception):
    pos: int
    msg: str

    def __init__(self, pos: int, msg: str):
        super().__init__()
        self.pos = pos
        self.msg = msg


class CJSONLoader:
    src: str
    offset: int
    decoder: json.JSONDecoder

    def __init__(self, src: str):
        self.decoder = json.JSONDecoder()
        self.src = src
        self.offset = 0

    def _strip(self, offset: int = 0):
        self.offset += offset
        self.src = self.src[offset:]
        next_src = self.src.lstrip()
        self.offset += len(self.src) - len(next_src)
        self.src = next_src

    def load(self) -> list[object]:
        jsons: list[object] = []
        self._strip()
        while self.src:
            try:
                obj, idx = self.decoder.raw_decode(self.src)
            except json.JSONDecodeError as err:
                raise CJSONError(err.pos + self.offset, "invalid json") from None
            else:
                jsons.append(obj)
                self._strip(idx)
                if self.src:
                    if self.src.startswith(","):
                        self._strip(1)
                    else:
                        raise CJSONError(self.offset, "invalid separation")
        return jsons


def load_cjson(src: str) -> list[Any]:
    return CJSONLoader(src).load()


def dump_cjson(objs: list[Any]):
    if objs:
        return (
            ",\n".join([json.dumps(e, ensure_ascii=False, indent=2) for e in objs])
            + ","
        )
    return ""


src = sys.stdin.read()
try:
    print(dump_cjson(load_cjson(src)))
except CJSONError as err:
    print(f"error at position {err.pos}: {err.msg}")
    print(src[max(err.pos - 20, 0) : err.pos + 20], file=sys.stderr)
    exit(1)
