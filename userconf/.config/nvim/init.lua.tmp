local o = vim.o
local wo = vim.wo
local bo = vim.bo
local g = vim.g
local fn = vim.fn
local cmd = vim.cmd
local api = vim.api
local map = api.nvim_set_keymap
local ncmd = api.nvim_command
local exec =  api.nvim_exec
vim.lsp.set_log_level("debug")

local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'

if fn.empty(fn.glob(install_path)) > 0 then
  fn.system({'git', 'clone', 'https://github.com/wbthomason/packer.nvim', install_path})
  ncmd 'packadd packer.nvim'
end

require('packer').startup(function()
  use 'tanvirtin/monokai.nvim'
  use 'folke/tokyonight.nvim'
  use 'wbthomason/packer.nvim'
  use 'kyazdani42/nvim-tree.lua'
  use 'neovim/nvim-lspconfig'
  use 'hrsh7th/nvim-compe'
  use 'othree/eregex.vim'
  -- use 'andersevenrud/compe-tmux'
  use 'hrsh7th/vim-vsnip'
  use 'nvim-treesitter/nvim-treesitter'
  use 'nvim-treesitter/nvim-treesitter-textobjects'
  use 'p00f/nvim-ts-rainbow'
  use 'glepnir/galaxyline.nvim'
  use {'nvim-telescope/telescope.nvim', requires = {{'nvim-lua/popup.nvim'}, {'nvim-lua/plenary.nvim'}}}
  use 'kevinhwang91/nvim-bqf'
  use 'b3nj5m1n/kommentary'
  use 'kabouzeid/nvim-lspinstall'
  use 'rafamadriz/friendly-snippets'
  use 'ray-x/lsp_signature.nvim'
  use 'wincent/ferret'
  use 'mg979/vim-visual-multi'
  use 'Valloric/ListToggle'
  use 'phaazon/hop.nvim'
  use 'troydm/zoomwintab.vim'
  use 'haya14busa/vim-asterisk'
  use 'npxbr/glow.nvim'
  use 'davidgranstrom/nvim-markdown-preview'
  use 'norcalli/nvim-colorizer.lua'
  use 'christoomey/vim-tmux-navigator'
  use 'jlanzarotta/bufexplorer'
  use 'bronson/vim-trailing-whitespace'
  -- use 'airblade/vim-rooter'
  use 'tpope/vim-surround'
  use 'tpope/vim-repeat'
  use 'tpope/vim-fugitive'
  use 'hkupty/iron.nvim'
  use 'lervag/vimtex'
  use 'foosoft/vim-argwrap'
  use 'AndrewRadev/sideways.vim'
  use 'wellle/targets.vim'
  use 'michaeljsmith/vim-indent-object'
  use 'andymass/vim-matchup'
  use 'AndrewRadev/splitjoin.vim'
end)


local def_opt = {noremap = true, silent = true}
local expr_opt = {expr = true, noremap = true, silent = true}

o.tabstop = 2
o.shiftwidth = 2
o.softtabstop = 2
o.autoindent = true
o.smartindent = true
o.expandtab = true
bo.tabstop = 2
bo.shiftwidth = 2
bo.softtabstop = 2
bo.autoindent = true
bo.smartindent = true
bo.expandtab = true

wo.number = true
wo.relativenumber = true
wo.wrap = false
wo.cursorline = true
wo.signcolumn = 'yes'

-- o.laststatus = 0
o.completeopt = 'menuone,noselect'
-- o.background = 'dark'
o.splitbelow = true
o.splitright = true
o.cmdheight = 2
o.ignorecase = true
o.clipboard='unnamed,unnamedplus'
o.encoding = 'utf-8'
o.scrolloff = 8
o.hidden = true
o.updatetime = 300
o.shortmess = o.shortmess .. 'c'
o.backspace = 'indent,eol,start'
o.backup = false
o.writebackup = false
o.ttyfast = true
o.termguicolors = true

map('v', 'p', '"_dP', def_opt)
map('', 'Q', ':qa<CR>', def_opt)
map('', '<left>', '<C-W>H', def_opt)
map('', '<right>', '<C-W>L', def_opt)
map('', '<up>', '<C-W>K', def_opt)
map('', '<down>', '<C-W>J', def_opt)
map('n', 'ö', ':noh<CR>', def_opt)

map('v', '<', '<gv', def_opt)
map('v', '>', '>gv', def_opt)

g.NVIM_TUI_ENABLE_TRUE_COLOR = 1
g.PYTHONUNBUFFERED = 1

map('', '<F1>', ':NvimTreeToggle<CR>', def_opt)
map('i', '<F1>', ':NvimTreeToggle<CR>', def_opt)
map('t', '<F1>', ':NvimTreeToggle<CR>', def_opt)

_G.nvim_tree_find_file = function()
  local cwd = fn.getcwd()
  local cur_path = fn.expand('%:p:h')
  require('nvim-tree').refresh()
  require('nvim-tree.lib').change_dir(cur_path)
  require('nvim-tree').find_file(true)
  cmd('cd ' .. cwd)
end
map('', 'gt', ':call v:lua.nvim_tree_find_file()<cr>', def_opt)

map('', '<C-h>', '<C-w>h', def_opt)
map('', '<C-j>', '<C-w>j', def_opt)
map('', '<C-k>', '<C-w>k', def_opt)
map('', '<C-l>', '<C-w>l', def_opt)

map('', '<C-p>', ':Telescope find_files<cr>', def_opt)
map('i', '<C-p>', '<esc>:Telescope find_files<cr>', def_opt)

local tree_cb = require'nvim-tree.config'.nvim_tree_callback
g.nvim_tree_bindings = {
  ['.'] = tree_cb('toggle_dotfiles'),
  [','] = tree_cb('cd'),
  ['u'] = tree_cb('dir_up'),
  ['s'] = tree_cb('vsplit'),
}
g.nvim_tree_quit_on_open = 1
g.nvim_tree_git_hl = 1
g.nvim_tree_highlight_opened_files = 1
g.nvim_tree_disable_window_picker = 1
g.nvim_tree_hijack_netrw = 1
g.nvim_tree_disable_netrw = 0

g.nvim_tree_icons = {
 default = '   ',
 symlink = '   ',
 git = {
   unstaged = '✗',
   staged = '✓',
   unmerged = '═',
   renamed = '➜',
   untracked = '★',
   deleted = '✖',
  },
 folder = {
   default = '▸ ',
   open = '▾ ',
   empty = '▸ ',
   empty_open = '▾ ',
   symlink = '▸ ',
   symlink_open = '▾ ',
  },
  lsp = {
    hint = 'H ',
    info = 'I ',
    warning = 'W ',
    error = 'E ',
  }
 }




map('t', '<C-h>', '<C-\\><C-n><C-W>h', def_opt)
map('t', '<C-j>', '<C-\\><C-n><C-W>j', def_opt)
map('t', '<C-k>', '<C-\\><C-n><C-W>k', def_opt)
map('t', '<C-l>', '<C-\\><C-n><C-W>l', def_opt)

exec([[au FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4]], false)

exec([[au BufEnter * set fo-=c fo-=r fo-=o]], false)

exec([[au TermOpen * setlocal nonumber norelativenumber signcolumn=no]], false)
exec([[au TermOpen,BufWinEnter,WinEnter term://* startinsert]], false)
exec([[au TermClose term://* exec 'bwipeout! ' . expand('<abuf>')]], false)

-- terminal colors
g.terminal_color_0  = '#000000'
g.terminal_color_1  = '#ff0000'
g.terminal_color_2  = '#3fff3f'
g.terminal_color_3  = '#ed9d12'
g.terminal_color_4  = '#5f87af'
g.terminal_color_5  = '#f92782'
g.terminal_color_6  = '#66d9ef'
g.terminal_color_7  = '#f8f8f2'
g.terminal_color_8  = '#ff0000'
g.terminal_color_9  = '#ff3f3f'
g.terminal_color_10 = '#3fff3f'
g.terminal_color_11 = '#deed12'
g.terminal_color_12 = '#5f87af'
g.terminal_color_13 = '#f92672'
g.terminal_color_14 = '#66d9ef'
g.terminal_color_15 = '#f8f8f2'


require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'enable';
  throttle_time = 80;
  source_timeout = 200;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = false;

  source = {
    path = true;
    buffer = true;
    calc = true;
    vsnip = true;
    nvim_lsp = true;
    nvim_lua = true;
    spell = true;
    tags = true;
    snippets_nvim = true;
    treesitter = true;
  };
}

local t = function(str)
  return api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = fn.col('.') - 1
    if col == 0 or fn.getline('.'):sub(col, col):match('%s') then
        return true
    else
        return false
    end
end

_G.tab_complete = function()
  if fn.pumvisible() == 1 then
    return t '<C-n>'
  elseif fn.call('vsnip#available', {1}) == 1 then
    return t '<Plug>(vsnip-expand-or-jump)'
  elseif check_back_space() then
    return t '<Tab>'
  else
    return fn['compe#complete']()
  end
end
_G.s_tab_complete = function()
  if fn.pumvisible() == 1 then
    return t '<C-p>'
  elseif fn.call('vsnip#jumpable', {-1}) == 1 then
    return t '<Plug>(vsnip-jump-prev)'
  else
    return t '<S-Tab>'
  end
end

map('i', '<Tab>', 'v:lua.tab_complete()', {expr = true})
map('s', '<Tab>', 'v:lua.tab_complete()', {expr = true})
map('i', '<S-Tab>', 'v:lua.s_tab_complete()', {expr = true})
map('s', '<S-Tab>', 'v:lua.s_tab_complete()', {expr = true})
map('i', '<C-Space>', 'compe#complete()', expr_opt)
map('i', '<CR>', "compe#confirm('<CR>')", expr_opt)
map('i', '<C-e>', "compe#close('<C-e>')", expr_opt)
map('i', '<C-f>', "compe#scroll({ 'delta': +4 })", expr_opt)
map('i', '<C-d>', "compe#scroll({ 'delta': -4 })", expr_opt)


require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
  },
  incremental_selection = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  rainbow = {
    enable = true,
    extended_mode = true,
    max_file_lines = 1000,
  }
}
require('kommentary.config').configure_language('default', {
    prefer_single_line_comments = true,
})
g.kommentary_create_default_mappings = false
map('n', 'gc', '<Plug>kommentary_line_default', {silent = true})
map('v', 'gc', '<Plug>kommentary_visual_default', {silent = true})

local nvim_lsp = require('lspconfig')

local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) api.nvim_buf_set_keymap(bufnr, ...) end

  require'lsp_signature'.on_attach({bind = true})
  buf_set_keymap('n', 'gD', '<Cmd>lua vim.lsp.buf.declaration()<CR>', def_opt)
  buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', def_opt)
  buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', def_opt)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', def_opt)
  buf_set_keymap('n', '<space>k', '<cmd>lua vim.lsp.buf.signature_help()<CR>', def_opt)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', def_opt)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', def_opt)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', def_opt)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', def_opt)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', def_opt)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', def_opt)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', def_opt)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', def_opt)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', def_opt)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', def_opt)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', def_opt)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', def_opt)
end

require'lspinstall'.setup()
local servers = require'lspinstall'.installed_servers()
for _, server in pairs(servers) do
  nvim_lsp[server].setup{on_attach = on_attach}
end

require'colorizer'.setup()

-- vim-matchup
g.matchup_matchparen_enabled = 1

-- ListToggle
g.lt_height = 10
map("", "ä", ":LToggle<cr>", def_opt)
map("", "Ö", ":QToggle<cr>", def_opt)

-- vim-asterisk
map("", "*", "<Plug>(asterisk-*)", {})
map("", "#", "<Plug>(asterisk-#)", {})
map("", "g*", "<Plug>(asterisk-g*)", {})
map("", "g#", "<Plug>(asterisk-g#)", {})
map("", "z*", "<Plug>(asterisk-z*)", {})
map("", "gz*", "<Plug>(asterisk-gz*)", {})
map("", "z#", "<Plug>(asterisk-z#)", {})
map("", "gz#", "<Plug>(asterisk-gz#)", {})

-- ferret
_G.SearchFilesRegex = function()
  fn.inputsave()
  local search = fn.input("Search in files: ")
  fn.inputrestore()
  if not search ~= "" then
    print(search)
    exec('Ack -i ' .. fn.substitute(fn.escape(search, ' '), '^-', '\\[-\\]', ''), false)
  end
end
map("", "_", ":call v:lua.SearchFilesRegex()<cr>", def_opt)
map("", "<leader>a", "<Plug>(FerretAckWord)", def_opt)
g.FerretMap = 0
g.FerretMaxResults = 1000

-- bufexplorer
g.bufExplorerDefaultHelp=0
g.bufExplorerDetailedHelp=0
g.bufExplorerFindActive=1
g.bufExplorerShowDirectories=0
g.bufExplorerShowNoName=0
g.bufExplorerShowRelativePath=1
g.bufExplorerShowTabBuffer=1
g.bufExplorerShowUnlisted=0
g.bufExplorerSortBy='mru'
g.bufExplorerSplitBelow=1
g.bufExplorerSplitRight=1
g.bufExplorerDisableDefaultKeyMapping=1
map("", "<F2>", ":ToggleBufExplorer<cr>", def_opt)
map("i", "<F2>", "<esc>:ToggleBufExplorer<cr>", def_opt)

-- vimtex
g.vimtex_compiler_progname = 'nvr'
g.vimtex_matchparen_enabled = 0
g.tex_flavor = 'latex'
g.vimtex_view_method = 'zathura'
g.vimtex_quickfix_mode = 2
g.vimtex_view_skim_reading_bar = 1
g.vimtex_quickfix_autoclose_after_keystrokes = 2
g.vimtex_quickfix_open_on_warning = 0
-- g.vimtex_quickfix_ignore_filters = {'overfull', 'underfull'}
g.tex_conceal = 'abdmg'

cmd([[au FileType tex setlocal conceallevel=1]], false)
cmd([[au FileType tex :NoMatchParen]], false)

-- argwrap
map('', 'Y', ':ArgWrap<cr>', def_opt)

-- sideways
map("", "R", ":SidewaysLeft<cr>", def_opt)
map("", "U", ":SidewaysRight<CR>", def_opt)

-- tmux
g.tmux_navigator_disable_when_zoomed = 1

-- zoomwintab
g.zoomwintab_remap = 0

-- eregex.vim
g.eregex_default_enable = 0

-- spellcheck
g.LangIndex = 0
g.LangList = {'en_us', 'de_de'}
_G.NextSpellLang = function()
  g.LangIndex = (g.LangIndex + 1) % (#g.LangList + 1)
  if g.LangIndex == 0 then
    wo.spell = false
    print("nospell")
  else
    local lang = g.LangList[g.LangIndex]
    bo.spelllang = lang
    wo.spell = true
    print("language: " .. lang)
  end
end
map("", "<F7>", ":call v:lua.NextSpellLang()<cr>", def_opt)
map("i", "<F7>", ":call v:lua.NextSpellLang()<cr>", def_opt)

-- toggle terminal
g.term_buf = 0
g.term_win = 0
_G.TermToggle = function(height)
  if fn.win_gotoid(g.term_win) ~= 0 then
    ncmd("hide")
  else
    ncmd('botright new')
    api.nvim_win_set_height(0, height)
    if g.term_buf ~= 0 and api.nvim_buf_is_loaded(g.term_buf) then
      api.nvim_win_set_buf(0, g.term_buf)
    else
      fn.termopen(os.getenv("SHELL"), {detach = 0})
      g.term_buf = fn.bufnr("")
      bo.buflisted = false
    end
    ncmd("startinsert")
    g.term_win = fn.win_getid()
  end
end
map("", "<F10>", ":call v:lua.TermToggle(10)<cr>", def_opt)
map("i", "<F10>", "<esc>:call v:lua.TermToggle(10)<cr>", def_opt)
map("t", "<F10>", "<C-\\><C-n>:call v:lua.TermToggle(10)<cr>", def_opt)


-- smart resize
local function resize_height (val) api.nvim_win_set_height(0, api.nvim_win_get_height(0) + val) end
local function resize_width (val) api.nvim_win_set_width(0, api.nvim_win_get_width(0) + val) end
_G.SmartResize = function(dir)
    local hwin = fn.winnr("h")
    local kwin = fn.winnr("k")
    local lwin = fn.winnr("l")
    local jwin = fn.winnr("j")

    if hwin ~= lwin then
        if dir == 0 then
            resize_width(5)
        else
            resize_width(-5)
        end
    elseif kwin ~= jwin then
        if dir == 0 then
            resize_height(1)
        else
            resize_height(-1)
        end
    end
end
map("", "+", ":call v:lua.SmartResize(0)<cr>", def_opt)
map("", "-", ":call v:lua.SmartResize(1)<cr>", def_opt)

g.python3_host_prog = '/usr/bin/python3'

if os.getenv("ASDF_DIR") ~= "" and not fn.empty(fn.glob(os.getenv("ASDF_DIR") .. '/shims/python3')) then
  g.python3_host_prog = os.getenv("ASDF_DIR") .. '/shims/python3'
end

g.python_host_prog = '/usr/bin/python2'
if os.getenv("ASDF_DIR") ~= "" and not fn.empty(fn.glob(os.getenv("ASDF_DIR") .. '/shims/python2')) then
  g.python_host_prog = os.getenv("ASDF_DIR") .. '/shims/python2'
end

map("", "<F12>", ":ZoomWinTabToggle<cr>", def_opt)
map("i", "<F12>", "<esc>:ZoomWinTabToggle<cr>", def_opt)
map("t", "<F12>", "<C-\\><C-n>:ZoomWinTabToggle<cr>", def_opt)
map("", "<F12>", ":ZoomWinTabToggle<cr>", def_opt)
map("i", "<F12>", "<esc>:ZoomWinTabToggle<cr>", def_opt)
map("t", "<F12>", "<C-\\><C-n>:ZoomWinTabToggle<cr>", def_opt)

map("t", "<F2>", "<C-\\><C-n>:ToggleBufExplorer<cr>", def_opt)
require('bqf').setup({
  auto_resize_height = false,
})


g.tokyonight_transparent = true
g.tokyonight_terminal_colors = false
g.tokyonight_style = "storm"
cmd('syntax on')
cmd('colorscheme monokai')
cmd([[hi LineNr guibg=none]])
cmd([[hi Normal guibg=none]])
cmd([[hi SignColumn guibg=none]])
cmd([[hi clear Conceal]])

map('n', '<leader>e', 'g$', def_opt)
map('n', '<leader>a', 'g^', def_opt)
map('n', '<space>,', ',', def_opt)
map('n', '<space>;', ';', def_opt)
