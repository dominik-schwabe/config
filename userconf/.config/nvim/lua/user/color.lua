local g = vim.g
local o = vim.o
local cmd = vim.cmd
local fn = vim.fn

local M = {}

M.rainbow = {
  "#dd5ddd",
  "#00cc00",
  "#ddad00",
  "#5eaeee",
  "#dd0000",
  "#dddd00",
}

local palette = {
  base0 = "#222426",
  base1 = "#272a30",
  base2 = "#26292C",
  base3 = "#2E323C",
  base4 = "#333842",
  base5 = "#4d5154",
  base6 = "#9ca0a4",
  base7 = "#b1b1b1",
  base8 = "#e3e3e1",
  border = "#a1b5b1",
  brown = "#504945",
  white = "#f8f8f0",
  full_white = "#ffffff",
  beautiful_white = "#d7d7d7",
  grey = "#8F908A",
  black = "#000000",
  pink = "#f92672",
  teal = "#00a1a1",
  amaranth = "#ff0077",
  alt_green = "#aadb00",
  green = "#87ff00",
  aqua = "#66d9ef",
  dark_yellow = "#cccc00",
  gold = "#ffd700",
  yellow = "#e6db74",
  dark_orange = "#dd7700",
  orange = "#fd971f",
  dawn = "#ff6600",
  purple = "#ae81ff",
  match_paren = "#dd5888",
  trailing = "#880000",
  neon_purple = "#ee5eee",
  bright_purple = "#ef0fbf",
  cool_green = "#00ffaf",
  cool_green2 = "#4ffb87",
  cool_blue1 = "#02b4ef",
  cool_blue2 = "#5fafff",
  directory = "#5e87af",
  link = "#8ab4f8",
  full_red = "#ff0000",
  fn = "#6688dd",
  loop = "#ee0000",
  conditional = "#eecc00",
  warning = "#dddd00",
  error = "#ff0000",
  note = "#d3d3d3",
  diff_add = "#224400",
  diff_remove = "#550000",
  diff_change = "#222244",
  diff_text = "#555599",
  visual = "#555555",
  light_red = "#441111",
  light_aqua = "#114444",
  light_yellow = "#444411",
  light_white = "#444444",
  yank = "#770077",
}

local S = {
  func = palette.green,
  func_call = palette.green,
  variable = palette.white,
  variable_builtin = palette.purple,
  constant = palette.orange,
  constant_builtin = palette.neon_purple,
  constant_macro = palette.neon_purple,
  attribute = palette.orange,
  character = palette.yellow,
  character_special = palette.neon_purple,
  annotation = palette.green,
  class = palette.aqua,
  constructor = palette.aqua,
  comment = palette.base6,
  conditional = palette.conditional,
  debug = palette.neon_purple,
  define = palette.neon_purple,
  delimiter = palette.white,
  exception = palette.pink,
  field = palette.base7,
  float = palette.purple,
  func_builtin = palette.neon_purple,
  func_macro = palette.green,
  include = palette.pink,
  keyword = palette.pink,
  keyword_func = palette.fn,
  keyword_operator = palette.pink,
  keyword_return = palette.purple,
  label = palette.cool_green,
  method = palette.green,
  method_call = palette.green,
  namespace = palette.purple,
  none = palette.yellow,
  number = palette.purple,
  boolean = palette.purple,
  operator = palette.pink,
  parameter = palette.orange,
  parameter_reference = palette.white,
  property = palette.base7,
  punctuation_delimiter = palette.full_white,
  punctuation_bracket = palette.white,
  punctuation_special = palette.pink,
  loop = palette.loop,
  storageclass = palette.aqua,
  storageclass_lifetime = palette.yellow,
  string = palette.yellow,
  string_regex = palette.purple,
  string_escape = palette.purple,
  string_special = palette.neon_purple,
  symbol = palette.neon_purple,
  tag = palette.pink,
  tag_attribute = palette.green,
  tag_delimiter = palette.white,
  reference = palette.link,
  text = palette.yellow,
  text_strong = palette.yellow,
  text_emphasis = palette.yellow,
  text_underline = palette.yellow,
  text_strike = palette.yellow,
  text_title = palette.yellow,
  text_literal = palette.purple,
  text_uri = palette.yellow,
  text_math = palette.aqua,
  text_environemnt = palette.cool_blue1,
  text_environemnt_name = palette.orange,
  text_note = palette.note,
  light_info = palette.light_white,
  light_hint = palette.light_aqua,
  light_warning = palette.light_yellow,
  light_error = palette.light_red,
  soft_hint = palette.aqua,
  soft_info = palette.aqua,
  soft_warning = palette.yellow,
  soft_error = palette.pink,
  hint = palette.aqua,
  info = palette.white,
  warning = palette.warning,
  error = palette.error,
  todo = palette.aqua,
  type = palette.aqua,
  type_builtin = palette.neon_purple,
  type_qualifier = palette.amaranth,
  type_definition = palette.neon_purple,
  file = palette.cool_blue1,
  folder = palette.aqua,
  directory = palette.directory,
  module = palette.pink,
  package = palette.yellow,
  enum = palette.orange,
  enum_member = palette.orange,
  interface = palette.aqua,
  array = palette.purple,
  object = palette.purple,
  key = palette.purple,
  null = palette.purple,
  struct = palette.aqua,
  event = palette.orange,
  diff_add = palette.diff_add,
  diff_remove = palette.diff_remove,
  diff_change = palette.diff_change,
  diff_text = palette.diff_text,
  diff_add_text = palette.green,
  diff_remove_text = palette.pink,
  snippet = palette.neon_purple,
}

local HL = {}

HL.treesitter = {
  ["@annotation"] = { fg = S.annotation },
  ["@attribute"] = { fg = S.attribute, bold = true },
  -- ["@boolean"] = { fg = S.boolean },
  ["@character"] = { fg = S.character },
  ["@character.special"] = { fg = S.character_special },
  ["@comment"] = { fg = S.comment },
  ["@conditional"] = { fg = S.conditional, bold = true },
  ["@constant"] = { fg = S.constant, bold = true },
  ["@constant.builtin"] = { fg = S.constant_builtin, bold = true },
  ["@constant.macro"] = { fg = S.constant_macro, bold = true },
  ["@constructor"] = { fg = S.constructor, bold = true },
  ["@debug"] = { fg = S.debug },
  ["@define"] = { fg = S.define },
  -- ["@error"] = { fg = S.error, bold = true },
  ["@exception"] = { fg = S.exception },
  ["@field"] = { fg = S.field },
  ["@float"] = { fg = S.float },
  ["@function"] = { fg = S.func },
  ["@function.call"] = { fg = S.func_call },
  ["@function.builtin"] = { fg = S.func_builtin },
  ["@function.macro"] = { fg = S.func_macro },
  ["@include"] = { fg = S.include, bold = true },
  ["@keyword"] = { fg = S.keyword },
  ["@keyword.function"] = { fg = S.keyword_func, bold = true },
  ["@keyword.operator"] = { fg = S.keyword_operator },
  ["@keyword.return"] = { fg = S.keyword_return, bold = true },
  ["@label"] = { fg = S.label },
  ["@method"] = { fg = S.method },
  ["@method.call"] = { fg = S.method_call },
  ["@namespace"] = { fg = S.namespace },
  ["@none"] = { fg = S.none },
  ["@number"] = { fg = S.number },
  ["@operator"] = { fg = S.operator },
  ["@parameter"] = { fg = S.parameter },
  ["@parameter.reference"] = { fg = S.parameter_reference },
  ["@property"] = { fg = S.property },
  ["@punctuation.delimiter"] = { fg = S.punctuation_delimiter },
  ["@punctuation.bracket"] = { fg = S.punctuation_bracket },
  ["@punctuation.special"] = { fg = S.punctuation_special },
  ["@repeat"] = { fg = S.loop, bold = true },
  ["@storageclass"] = { fg = S.storageclass },
  ["@storageclass.lifetime"] = { fg = S.storageclass_lifetime, bold = true },
  ["@string"] = { fg = S.string },
  ["@string.regex"] = { fg = S.string_regex },
  ["@string.escape"] = { fg = S.string_escape },
  ["@string.special"] = { fg = S.string_special },
  ["@symbol"] = { fg = S.symbol },
  ["@tag"] = { fg = S.tag },
  ["@tag.attribute"] = { fg = S.tag_attribute },
  ["@tag.delimiter"] = { fg = S.tag_delimiter },
  ["@text"] = { fg = S.text },
  ["@text.reference"] = { fg = S.reference, underline = true },
  ["@text.strong"] = { fg = S.text_strong, bold = true },
  ["@text.emphasis"] = { fg = S.text_emphasis, bold = true },
  ["@text.underline"] = { fg = S.text_underline, underline = true },
  ["@text.strike"] = { fg = S.text_strike, strikethrough = true },
  ["@text.title"] = { fg = S.text_title, bold = true },
  ["@text.literal"] = { fg = S.text_literal },
  ["@text.uri"] = { fg = S.text_uri, bold = true },
  ["@text.math"] = { fg = S.text_math },
  ["@text.environment"] = { fg = S.text_environemnt },
  ["@text.environment.name"] = { fg = S.text_environemnt_name },
  ["@text.note"] = { fg = S.text_note, bold = true },
  ["@text.warning"] = { fg = S.warning, bold = true },
  ["@text.danger"] = { fg = S.error, bold = true },
  ["@todo"] = { fg = S.todo },
  ["@type"] = { fg = S.type },
  ["@type.builtin"] = { fg = S.type_builtin },
  ["@type.qualifier"] = { fg = S.type_qualifier, bold = true },
  ["@type.definition"] = { fg = S.type_definition },
  ["@variable"] = { fg = S.variable },
  ["@variable.builtin"] = { fg = S.variable_builtin },
  markdownTSStringEscape = { bg = palette.base6 },
}

HL.navic = {
  NavicIconsFile = { fg = S.file, bg = palette.base3 },
  NavicIconsModule = { fg = S.module, bg = palette.base3 },
  NavicIconsNamespace = { fg = S.namespace, bg = palette.base3 },
  NavicIconsPackage = { fg = S.package, bg = palette.base3 },
  NavicIconsClass = { fg = S.class, bg = palette.base3 },
  NavicIconsMethod = { fg = S.method, bg = palette.base3 },
  NavicIconsProperty = { fg = S.property, bg = palette.base3 },
  NavicIconsField = { fg = S.field, bg = palette.base3 },
  NavicIconsConstructor = { fg = S.constructor, bg = palette.base3 },
  NavicIconsEnum = { fg = S.enum, bg = palette.base3 },
  NavicIconsInterface = { fg = S.interface, bg = palette.base3 },
  NavicIconsFunction = { fg = S.func, bg = palette.base3 },
  NavicIconsVariable = { fg = S.variable, bg = palette.base3 },
  NavicIconsConstant = { fg = S.constant, bg = palette.base3 },
  NavicIconsString = { fg = S.string, bg = palette.base3 },
  NavicIconsNumber = { fg = S.number, bg = palette.base3 },
  NavicIconsBoolean = { fg = S.boolean, bg = palette.base3 },
  NavicIconsArray = { fg = S.array, bg = palette.base3 },
  NavicIconsObject = { fg = S.object, bg = palette.base3 },
  NavicIconsKey = { fg = S.key, bg = palette.base3 },
  NavicIconsNull = { fg = S.null, bg = palette.base3 },
  NavicIconsEnumMember = { fg = S.enum_member, bg = palette.base3 },
  NavicIconsStruct = { fg = S.struct, bg = palette.base3 },
  NavicIconsEvent = { fg = S.event, bg = palette.base3 },
  NavicIconsOperator = { fg = S.operator, bg = palette.base3 },
  NavicIconsTypeParameter = { fg = S.parameter, bg = palette.base3 },
  -- NavicText = {fg = palette.base8, bg = palette.base3},
  -- NavicSeparator = {fg = palette.base8, bg = palette.base3},
}

HL.syntax = {
  CurSearch = { fg = palette.base2, bg = palette.orange },
  Boolean = { fg = S.boolean },
  Character = { fg = S.string },
  ColorColumn = { bg = palette.base3 },
  Comment = { fg = S.comment },
  Conceal = {},
  Conditional = { fg = S.conditional, bold = true },
  Constant = { fg = S.constant },
  Cursor = { reverse = true },
  CursorColumn = { bg = palette.base3 },
  CursorIM = { reverse = true },
  CursorLine = { bg = palette.base3 },
  CursorLineNr = { fg = palette.orange, bg = palette.base2 },
  Debug = { fg = S.debug },
  Define = { fg = S.define },
  Delimiter = { fg = S.delimiter },
  DiffAdd = { bg = S.diff_add },
  DiffChange = { bg = S.diff_change },
  DiffDelete = { bg = S.diff_remove },
  DiffText = { bg = S.diff_text },
  Directory = { fg = S.directory, bold = true },
  EndOfBuffer = {},
  Error = { fg = S.soft_error, bold = true },
  ModeMsg = { fg = palette.white },
  MoreMsg = { fg = palette.white },
  WarningMsg = { fg = S.soft_warning, bold = true },
  ErrorMsg = { fg = S.soft_error, bold = true },
  Exception = { fg = S.exception },
  Float = { fg = S.float },
  FoldColumn = { fg = palette.white, bg = palette.black },
  Folded = { fg = palette.grey, bg = palette.base3 },
  Function = { fg = S.func },
  Identifier = { fg = S.variable },
  Ignore = {},
  IncSearch = { fg = palette.base2, bg = palette.orange },
  Include = { fg = S.include },
  Keyword = { fg = S.keyword },
  Label = { fg = S.label },
  LineNr = { bg = "none" },
  Macro = { fg = S.constant_macro },
  MatchParen = { bg = palette.match_paren, fg = "black" },
  NonText = { fg = palette.base5 },
  Normal = { bg = "none" },
  NormalFloat = { bg = "#262626" },
  Number = { fg = S.number },
  Operator = { fg = S.operator },
  Pmenu = { fg = palette.white, bg = palette.base3 },
  PmenuSbar = { bg = palette.base3 },
  PmenuSel = { fg = palette.base4, bg = palette.orange },
  PmenuSelBold = { fg = palette.base4, bg = palette.orange },
  PmenuThumb = { fg = palette.purple, bg = palette.green },
  PreCondit = { fg = palette.pink },
  PreProc = { fg = palette.green },
  Question = { fg = palette.yellow, bold = true },
  QuickFixLine = { fg = palette.purple, bold = true },
  Repeat = { fg = S.loop, bold = true },
  Search = { fg = palette.base2, bg = palette.gold },
  SignColumn = { bg = "none" },
  Special = { fg = palette.white },
  SpecialChar = { fg = palette.pink },
  SpecialComment = { fg = palette.grey },
  SpecialKey = { fg = palette.pink },
  SpellBad = { fg = palette.red, undercurl = true },
  SpellCap = { fg = palette.purple, undercurl = true },
  SpellLocal = { fg = palette.pink, undercurl = true },
  SpellRare = { fg = palette.aqua, undercurl = true },
  Statement = { fg = palette.pink },
  StatusLine = { fg = palette.base7, bg = palette.base3 },
  StatusLineNC = { fg = palette.grey, bg = palette.base3 },
  StorageClass = { fg = S.storageclass },
  String = { fg = S.string },
  Structure = { fg = S.struct },
  TabLineFill = {},
  TabLineSel = { bg = palette.base4 },
  Tabline = {},
  Tag = { fg = S.tag },
  Terminal = { fg = palette.white, bg = palette.base2 },
  Title = { fg = S.text_title, bold = true },
  Todo = { fg = S.todo },
  Type = { fg = S.type },
  Typedef = { fg = S.type_definition },
  Underlined = { underline = true },
  VertSplit = { fg = palette.brown },
  Visual = { bg = palette.visual },
  VisualNOS = { bg = palette.base3 },
  Whitespace = { fg = palette.base5 },
  WildMenu = { fg = palette.white, bg = palette.orange },
  debugBreakpoint = { fg = palette.base2, bg = palette.red },
  diffAdded = { fg = S.diff_add_text },
  diffRemoved = { fg = S.diff_remove_text },
  iCursor = { reverse = true },
  lCursor = { reverse = true },
  vCursor = { reverse = true },
}

HL.rainbow = {
  TSRainbowRed = { fg = "#ee4444" },
  TSRainbowYellow = { fg = "#dddd00" },
  TSRainbowBlue = { fg = "#5eaeee" },
  TSRainbowOrange = { fg = "#ddad00" },
  TSRainbowGreen = { fg = "#00cc00" },
  TSRainbowViolet = { fg = "#dd5ddd" },
  TSRainbowCyan = { fg = "#00dddd" },
}

HL.diagnostics = {
  DiagnosticSignHint = { fg = S.hint },
  DiagnosticSignInfo = { fg = S.info },
  DiagnosticSignWarn = { fg = S.warning },
  DiagnosticSignError = { fg = S.error },
  DiagnosticUnderlineHint = { bg = S.light_hint },
  DiagnosticUnderlineInfo = { bg = S.light_info },
  DiagnosticUnderlineWarn = { bg = S.light_warning },
  DiagnosticUnderlineError = { bg = S.light_error },
  DiagnosticVirtualTextHint = { fg = S.hint },
  DiagnosticVirtualTextInfo = { fg = S.info },
  DiagnosticVirtualTextWarn = { fg = S.warning },
  DiagnosticVirtualTextError = { fg = S.error },
}

HL.nvim_tree = {
  NvimTreeRootFolder = { fg = palette.yellow },
}

HL.telescope = {
  TelescopeBorder = { fg = palette.base7 },
  TelescopeNormal = { fg = palette.base8, bg = palette.base0 },
  TelescopeSelection = { fg = palette.white, bold = true },
  TelescopeSelectionCaret = { fg = palette.green },
  TelescopeMultiSelection = { fg = palette.pink },
  TelescopeMatching = { fg = palette.aqua },
}

HL.cmp = {
  CmpDocumentation = { fg = palette.white, bg = palette.base1 },
  CmpDocumentationBorder = { fg = palette.white, bg = palette.base1 },
  CmpItemAbbr = { fg = palette.base6 },
  CmpItemAbbrMatch = { fg = palette.white },
  CmpItemAbbrMatchFuzzy = { fg = palette.base6 },
  CmpItemKindClass = { fg = S.class },
  CmpItemKindColor = { fg = palette.orange },
  CmpItemKindConstant = { fg = S.constant },
  CmpItemKindConstructor = { fg = S.constructor },
  CmpItemKindDefault = { fg = palette.white },
  CmpItemKindEnum = { fg = S.enum },
  CmpItemKindEnumMember = { fg = S.enum_member },
  CmpItemKindEvent = { fg = S.event },
  CmpItemKindField = { fg = S.field },
  CmpItemKindFile = { fg = S.file },
  CmpItemKindFolder = { fg = S.folder },
  CmpItemKindFunction = { fg = S.func },
  CmpItemKindInterface = { fg = S.interface },
  CmpItemKindKeyword = { fg = S.keyword },
  CmpItemKindMethod = { fg = S.method },
  CmpItemKindModule = { fg = S.module },
  CmpItemKindOperator = { fg = S.operator },
  CmpItemKindProperty = { fg = S.property },
  CmpItemKindReference = { fg = S.reference },
  CmpItemKindSnippet = { fg = S.snippet },
  CmpItemKindStruct = { fg = S.struct },
  CmpItemKindText = { fg = S.text },
  CmpItemKindTypeParameter = { fg = S.parameter },
  CmpItemKindUnit = { fg = palette.orange },
  CmpItemKindValue = { fg = palette.orange },
  CmpItemKindVariable = { fg = S.variable },
  CmpItemMenu = { fg = palette.base6 },
}

HL.lsp = {
  LspReferenceRead = { link = "CursorLine" },
  LspReferenceText = { link = "CursorLine" },
  LspReferenceWrite = { link = "CursorLine" },
  LspSignatureActiveParameter = { fg = palette.orange },
}

HL.other = {
  CursorWord0 = { bg = palette.white, fg = palette.black },
  CursorWord1 = { bg = palette.white, fg = palette.black },
  TrailingWhitespace = { bg = palette.trailing },
  dbui_tables = { fg = palette.white },
  VM_Cursor_hl = { link = "Visual" },
  VM_Mono = { bg = palette.neon_purple, fg = palette.black },
  VM_Cursor = { link = "PmenuSel" },
  VM_Extend = { link = "PmenuSel" },
  VM_Insert = { link = "Cursor" },
  MultiCursor = { link = "Visual" },
  NoHighlight = { bg = "none", fg = "none" },
  FullscreenMarker = { bg = palette.beautiful_white },
  TermBackground = { bg = "#111111" },
  EyelinerPrimary = { bg = palette.base5, fg = "none" },
  EyelinerSecondary = { bg = "none", fg = "none" },
  IlluminatedWordText = { link = "CursorLine" },
  IlluminatedWordRead = { link = "CursorLine" },
  IlluminatedWordWrite = { link = "CursorLine" },
  MarkSignHL = { fg = palette.purple },
  HydraRed = { fg = palette.red },
  HydraBlue = { fg = palette.cool_blue1 },
  HydraPink = { fg = palette.pink },
  HydraAmaranth = { fg = palette.amaranth },
  HydraTeal = { fg = palette.teal },
  Orange = { fg = palette.orange },
  Pink = { fg = palette.pink },
  Yellow = { fg = palette.yellow },
  Purple = { fg = palette.purple },
  Green = { fg = palette.green },
  Aqua = { fg = palette.aqua },
  Blue = { fg = palette.fn },
  White = { fg = palette.white },
  Grey = { fg = palette.grey },
  YankHighlight = { bg = palette.yank },
}

function M.setup()
  cmd("hi clear")
  if fn.exists("syntax_on") then
    cmd("syntax reset")
  end
  o.background = "dark"
  o.termguicolors = true
  g.colors_name = "monokai"
  for _, group in pairs(HL) do
    for hl_group, colors in pairs(group) do
      vim.api.nvim_set_hl(0, hl_group, colors)
    end
  end

  g.VM_theme_set_by_colorscheme = true
end

return M
