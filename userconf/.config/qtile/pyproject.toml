[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qtile-config"
dynamic = ["version"]
description = ""
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [{ name = "Dominik Schwabe", email = "schwabedominik@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = []

[project.urls]
Documentation = "https://github.com/dominik-schwabe/llm-templates#readme"
Issues = "https://github.com/dominik-schwabe/llm-templates/issues"
Source = "https://github.com/dominik-schwabe/llm-templates"

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"

[tool.hatch.version]
path = "src/llm_templates/__about__.py"

[tool.hatch.envs.default.scripts]
spell = "cspell --quiet {args:src tests docs README.md}"
update-hooks = "pre-commit autoupdate"

[[tool.hatch.envs.test.matrix]]
python = ["3.12", "3.13"]
[tool.hatch.envs.test]
dependencies = ["coverage[toml]>=6.5", "pytest"]
[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[tool.hatch.envs.docs]
dependencies = ["mkdocs-material", "markdown-exec[ansi]"]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict {args}"
serve = "mkdocs serve {args}"
deploy = "mkdocs gh-deploy {args}"

[tool.hatch.envs.lint]
detached = true
dependencies = ["mypy>=1.0.0", "ruff>=0.3.0", "vulture"]
[tool.hatch.envs.lint.scripts]
format = [
  "ruff check --fix-only {args:src tests}",
  "ruff format {args:src tests}",
]
style = ["ruff check {args:src tests docs}"]
deadcode = "vulture {args:src vulture_whitelist.py}"
typing = "mypy --install-types --non-interactive {args:src tests}"
all = ["- format", "- style", "- typing", "- deadcode"]

[tool.vulture]
min_confidence = 60

[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "TRY003",
  "COM812",
  "ISC001",
  "D",
  "ANN",
  "INP",
  "G",
  "FA",
  "PGH",
  "RET",
  "PYI",
  "PLW",
  "EM101",
  "EM102",
  "S104",
  "A003",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = []

[tool.ruff.lint.isort]
known-first-party = ["llm_templates"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101"]
"docs/*" = ["I002", "T201"]

[tool.ruff.format]
quote-style = "double"

[tool.mypy]
python_version = "3.12"
implicit_reexport = true
check_untyped_defs = true
disallow_any_explicit = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
pretty = true
show_column_numbers = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.coverage.run]
source_pkgs = ["llm_templates", "tests"]
branch = true
parallel = true
omit = ["src/llm_templates/__about__.py"]

[tool.coverage.paths]
llm_templates = ["src/llm_templates", "*/llm-templates/src/llm_templates"]
tests = ["tests", "*/llm-templates/tests"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "raise NotImplementedError",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:",
  "@overload",
  "@typing.overload",
  "assert_never",
  "no cov",
  "if __name__ == .__main__.:",
]
