#!/usr/bin/python3
# -*- coding: utf-8 -*-

import time
from pathlib import Path

from i3pystatus import IntervalModule, Status
from i3pystatus.core.util import TimeWrapper

import logging
logging.disable(logging.CRITICAL)

class Timetrack(IntervalModule):
    interval = 1

    on_leftclick = "toggle"
    on_rightclick = "init"

    settings = (
        "format",
        "color_running",
        "color_stopped",
    )

    format = "%h:%M"
    color_running = "#00ff00"
    color_reseted = "#ffffff"
    color_stopped = "#ff0000"

    def init(self):
        self.start_time = 0
        self.stop_time = 0
        self.started = False
        self.running = False

    def run(self):
        if not self.started:
            elapsed = 0.0
            color = self.color_reseted
        elif self.running:
            elapsed = time.time() - self.start_time
            color = self.color_running
        else:
            elapsed = self.stop_time - self.start_time
            color = self.color_stopped

        self.output = {
            "full_text": format(TimeWrapper(elapsed, self.format)),
            "color": color,
        }

    def toggle(self):
        self.started = True
        if self.running:
            self.stop_time = time.time()
        else:
            self.start_time += time.time() - self.stop_time
        self.running = not self.running


status = Status()

status.register("clock", format="%H:%M", color="#DEED12")
status.register("clock", format="%a %d.%m.%Y", color="#F92782")
status.register(
    "shell",
    format="{output}",
    command='echo $(pamixer --get-volume)%; if [ $(pamixer --get-mute) == "true" ]; then echo ðŸ”‡; exit 1; else echo ðŸ”Š; fi',
    error_color="#FF0000",
    color="#00FFFF",
    interval=1,
)
# status.register(
#     "pulseaudio",
#     format="\U0001F50A {volume:3.0f}%",
#     format_muted="\U0001f507 {volume:3.0f}%",
#     color_unmuted="#00FFFF",
#     on_downscroll=None,
#     on_upscroll=None,
# #      on_downscroll="decrease_volume",
# #      on_upscroll="increase_volume"
# )
status.register(
    "battery",
    format="{glyph} {percentage:6.2f}% {remaining:%E%h:%M}",
    critical_level_percentage=15,
    color="#DEED12",
    charging_color="#00FF00",
    full_color="#00FF00",
)
if Path("/sys/class/thermal/thermal_zone0/temp").exists():
    status.register(
        "temp", format="{temp:.0f}Â°C", interval=1, alert_temp=65, alert_color="#FF0000"
    )
status.register(
    "mem",
    divisor=1000000000,
    format="{percent_used_mem}% ({total_mem:.0f} GB)",
    color="#00FFFF",
    round_size=1,
    interval=1,
)
status.register(Timetrack())
status.register(
    "network",
    detect_active=True,
    format_up="{v4}",
    format_down="DOWN",
    on_downscroll=None,
    on_upscroll=None,
)
status.register(
    "cmus",
    format_not_running="cmus not running",
    on_downscroll=None,
    on_upscroll=None,
    on_middleclick="previous_song",
)

status.run()


# vi: ft=python
